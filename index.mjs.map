{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport { isPrimitive as isPositiveNumber } from '@stdlib/assert-is-positive-number';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport format from '@stdlib/string-format';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// VARIABLES //\n\nvar DEFAULT_BASE = 10;\nvar DEFAULT_LEN = 100;\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns evenly spaced numbers on a log scale.\n*\n* @param {number} start - exponent of starting value (inclusive)\n* @param {number} stop - exponent of stopping value (inclusive)\n* @param {NonNegativeInteger} [N=100] - number of values\n* @param {Options} [options] - function options\n* @param {PositiveNumber} [options.base=10] - base of log space\n* @throws {TypeError} first argument must be a number\n* @throws {TypeError} second argument must be a number\n* @throws {TypeError} `N` argument must be a nonnegative integer\n* @throws {TypeError} `options` argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Iterator} iterator\n*\n* @example\n* var iter = iterLogspace( 0, 3, 4 );\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 10\n*\n* v = iter.next().value;\n* // returns 100\n*\n* // ...\n*/\nfunction iterLogspace( start, stop, N, options ) {\n\tvar step;\n\tvar iter;\n\tvar FLG;\n\tvar b;\n\tvar n;\n\tvar d;\n\tvar i;\n\n\tif ( !isNumber( start ) || isnan( start ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number. Value: `%s`.', start ) );\n\t}\n\tif ( !isNumber( stop ) || isnan( stop ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number. Value: `%s`.', stop ) );\n\t}\n\tif ( arguments.length === 3 ) {\n\t\tif ( isNonNegativeInteger( N ) ) {\n\t\t\tn = N;\n\t\t\tb = DEFAULT_BASE;\n\t\t} else if ( isPlainObject( N ) ) {\n\t\t\tn = DEFAULT_LEN;\n\t\t\tif ( hasOwnProp( N, 'base' ) ) {\n\t\t\t\tif ( !isPositiveNumber( N.base ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'base', N.base ) );\n\t\t\t\t}\n\t\t\t\tb = N.base;\n\t\t\t} else {\n\t\t\t\tb = DEFAULT_BASE;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be either a nonnegative integer or an object. Value: `%s`.', N ) );\n\t\t}\n\t} else if ( arguments.length >= 4 ) {\n\t\tif ( !isNonNegativeInteger( N ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%s`.', N ) );\n\t\t}\n\t\tn = N;\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'base' ) ) {\n\t\t\tif ( !isPositiveNumber( options.base ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'base', options.base ) );\n\t\t\t}\n\t\t\tb = options.base;\n\t\t} else {\n\t\t\tb = DEFAULT_BASE;\n\t\t}\n\t} else {\n\t\tn = DEFAULT_LEN;\n\t\tb = DEFAULT_BASE;\n\t}\n\td = n - 1;\n\tstep = (stop-start) / d;\n\ti = -1;\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\ti += 1;\n\t\tif ( FLG || i >= n ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tif ( i === 0 ) {\n\t\t\treturn {\n\t\t\t\t'value': pow( b, start ),\n\t\t\t\t'done': false\n\t\t\t};\n\t\t}\n\t\tif ( i === d ) {\n\t\t\treturn {\n\t\t\t\t'value': pow( b, stop ),\n\t\t\t\t'done': false\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'value': pow( b, (i*step)+start ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterLogspace( start, stop, n, {\n\t\t\t'base': b\n\t\t});\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterLogspace;\n"],"names":["iterLogspace","start","stop","N","options","step","iter","FLG","b","n","d","i","isNumber","isnan","TypeError","format","arguments","length","isNonNegativeInteger","isPlainObject","hasOwnProp","isPositiveNumber","base","setReadOnly","next","end","iteratorSymbol","factory","done","value","pow"],"mappings":";;mgCAuEA,SAASA,EAAcC,EAAOC,EAAMC,EAAGC,GACtC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAUX,IAAWY,EAAOZ,GACjC,MAAM,IAAIa,UAAWC,EAAQ,kEAAmEd,IAEjG,IAAMW,EAAUV,IAAUW,EAAOX,GAChC,MAAM,IAAIY,UAAWC,EAAQ,mEAAoEb,IAElG,GAA0B,IAArBc,UAAUC,OACd,GAAKC,EAAsBf,GAC1BM,EAAIN,EACJK,EArDgB,OAsDV,KAAKW,EAAehB,GAW1B,MAAM,IAAIW,UAAWC,EAAQ,mGAAoGZ,IATjI,GADAM,EAtDe,IAuDVW,EAAYjB,EAAG,QAAW,CAC9B,IAAMkB,EAAkBlB,EAAEmB,MACzB,MAAM,IAAIR,UAAWC,EAAQ,uEAAwE,OAAQZ,EAAEmB,OAEhHd,EAAIL,EAAEmB,IACV,MACId,EA9De,EAkEhB,MACK,GAAKQ,UAAUC,QAAU,EAAI,CACnC,IAAMC,EAAsBf,GAC3B,MAAM,IAAIW,UAAWC,EAAQ,+EAAgFZ,IAG9G,GADAM,EAAIN,GACEgB,EAAef,GACpB,MAAM,IAAIU,UAAWC,EAAQ,oEAAqEX,IAEnG,GAAKgB,EAAYhB,EAAS,QAAW,CACpC,IAAMiB,EAAkBjB,EAAQkB,MAC/B,MAAM,IAAIR,UAAWC,EAAQ,uEAAwE,OAAQX,EAAQkB,OAEtHd,EAAIJ,EAAQkB,IACf,MACGd,EAjFgB,EAmFnB,MACEC,EAnFgB,IAoFhBD,EArFiB,GAoGlB,OAZAH,GAAQH,EAAKD,IADbS,EAAID,EAAI,GAERE,GAAK,EAILY,EADAjB,EAAO,CAAA,EACY,OAAQkB,GAC3BD,EAAajB,EAAM,SAAUmB,GAGxBC,GACJH,EAAajB,EAAMoB,EAAgBC,GAE7BrB,EAQP,SAASkB,IAER,OADAb,GAAK,EACAJ,GAAOI,GAAKF,EACT,CACNmB,MAAQ,GAGC,IAANjB,EACG,CACNkB,MAASC,EAAKtB,EAAGP,GACjB2B,MAAQ,GAGLjB,IAAMD,EACH,CACNmB,MAASC,EAAKtB,EAAGN,GACjB0B,MAAQ,GAGH,CACNC,MAASC,EAAKtB,EAAIG,EAAEN,EAAMJ,GAC1B2B,MAAQ,EAET,CASD,SAASH,EAAKI,GAEb,OADAtB,GAAM,EACDS,UAAUC,OACP,CACNY,MAASA,EACTD,MAAQ,GAGH,CACNA,MAAQ,EAET,CAQD,SAASD,IACR,OAAO3B,EAAcC,EAAOC,EAAMO,EAAG,CACpCa,KAAQd,GAET,CACF"}