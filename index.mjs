// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-assert-is-nan@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nonnegative-integer@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/symbol-iterator@esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-pow@esm/index.mjs";var l=e,u=t.isPrimitive,p=s,b=r.isPrimitive,h=i.isPrimitive,j=n,v=o,g=a,f=m,c=d;var w=function e(t,s,r,i){var n,o,a,m,d,w,x;if(!u(t)||p(t))throw new TypeError(f("invalid argument. First argument must be a number. Value: `%s`.",t));if(!u(s)||p(s))throw new TypeError(f("invalid argument. Second argument must be a number. Value: `%s`.",s));if(3===arguments.length)if(b(r))d=r,m=10;else{if(!j(r))throw new TypeError(f("invalid argument. Third argument must be either a nonnegative integer or an object. Value: `%s`.",r));if(d=100,v(r,"base")){if(!h(r.base))throw new TypeError(f("invalid option. `%s` option must be a positive number. Option: `%s`.","base",r.base));m=r.base}else m=10}else if(arguments.length>=4){if(!b(r))throw new TypeError(f("invalid argument. Third argument must be a nonnegative integer. Value: `%s`.",r));if(d=r,!j(i))throw new TypeError(f("invalid argument. Fourth argument must be an object. Value: `%s`.",i));if(v(i,"base")){if(!h(i.base))throw new TypeError(f("invalid option. `%s` option must be a positive number. Option: `%s`.","base",i.base));m=i.base}else m=10}else d=100,m=10;return n=(s-t)/(w=d-1),x=-1,l(o={},"next",y),l(o,"return",T),g&&l(o,g,E),o;function y(){return x+=1,a||x>=d?{done:!0}:0===x?{value:c(m,t),done:!1}:x===w?{value:c(m,s),done:!1}:{value:c(m,x*n+t),done:!1}}function T(e){return a=!0,arguments.length?{value:e,done:!0}:{done:!0}}function E(){return e(t,s,d,{base:m})}},x=w;export{x as default};
//# sourceMappingURL=index.mjs.map
